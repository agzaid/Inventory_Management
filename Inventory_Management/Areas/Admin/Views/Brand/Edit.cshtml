@model Domain.Models.BrandVM

<div class="page-wrapper">
    <div class="page-content">
        <div class="row">
            <div class="col">
                <div class="card radius-10">
                    <div class="card-body p-4">
                        <h5 class="card-title">Edit Brand</h5>
                        <hr />
                        <div class="form-body mt-4">
                            <div class="row">
                                <div class="col-lg-8">
                                    <div class="border border-3 p-4 rounded">
                                        <form id="editForm" asp-action="Edit" asp-controller="Brand" enctype="multipart/form-data">
                                            <div class="form-body mt-4">
                                                @* <div class="row">
                                                    <div class="col-lg-8">
                                                        <div class="border border-3 p-4 rounded"> *@
                                                <div class="col-12">
                                                    <label class="form-label">Brand Name</label>
                                                    <input class="form-control" asp-for="BrandName">
                                                    <span asp-validation-for="BrandName" class="text-danger"></span>

                                                </div>
                                                <div class="col-12">
                                                    <label class="form-label">Brand Name Arabic</label>
                                                    <input class="form-control" asp-for="BrandNameAr">
                                                    <span asp-validation-for="BrandNameAr" class="text-danger"></span>

                                                </div>
                                                <div class="col-12">
                                                    <label class="form-label">Description</label>
                                                    <input class="form-control" asp-for="Description">
                                                    <span asp-validation-for="Description" class="text-danger"></span>
                                                </div>
                                                <div class="mb-3">
                                                    <label for="inputProductDescription" class="form-label">Brand Images</label>
                                                    <input id="ImagesFormFiles" accept="image/*" name="ImagesFormFiles" type="file" multiple>
                                                </div>
                                                <div class="mb-3 d-flex" style="height:auto">
                                                    @for (int i = 0; i < Model?.ListOfRetrievedImages?.Count; i++)
                                                    {
                                                        var imageUrl = Model.ListOfRetrievedImages[i];  // Base64 string

                                                        if (!string.IsNullOrEmpty(imageUrl))
                                                        {
                                                            <div class="image-container" id="image-container_@i" style="position: relative; display: inline-block; height:fit-content">
                                                                <!-- Image -->
                                                                <img width="100%" height="50%" src="@imageUrl" alt="Image" />
                                                                <input name="oldImagesBytes[@i]" id="oldImagesBytes[@i]" value="@imageUrl" hidden>
                                                                <!-- Pop-up with delete option -->
                                                                <div class="popup-delete" style="display: block; position: absolute; top: 0; right: 0; cursor: pointer;">
                                                                    <button class="btn btn-inverse-danger" type="button" onclick="deleteImage(@i)">X</button>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                                <div class="d-flex pt-2">
                                                    <div class="form-group mx-1">
                                                        <input type="submit" value="Save" class="btn btn-inverse-success col-2" style="width:auto" />
                                                    </div>
                                                   
                                                </div>
                                               
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div><!--end row-->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#ImagesFormFiles').imageuploadify();

            $('#SellingPrice, #OtherShopsPrice').on('input', function() {
                calculateDiscountPercentage();
            });
            $('#BuyingPrice').on('input', function() {
                CalculateMaxDiscount();
            });
            // $('#editForm').submit(function(event) {
            // // event.preventDefault();

            //     updateInputIndices();
            // });



            function CalculateMaxDiscount() {
                var sellingPrice = parseFloat($('#SellingPrice').val());
                var buyingPrice = parseFloat($('#BuyingPrice').val());

                if (!isNaN(sellingPrice) && sellingPrice > 0 && !isNaN(buyingPrice) && buyingPrice > 0) {
                    var newPrice = sellingPrice - buyingPrice;
                    var discount = Math.floor((newPrice/sellingPrice) *100);

                    $('#MaximumDiscountPercentage').val(discount.toFixed(2) + "%");
                } else {
                    $('#MaximumDiscountPercentage').val('');
                }
            }
            function calculateDiscountPercentage() {
                var sellingPrice = parseFloat($('#SellingPrice').val());
                var otherShopPrice = parseFloat($('#OtherShopsPrice').val());

                // Check if both prices are valid and the otherShopPrice is greater than 0
                if (!isNaN(sellingPrice) && !isNaN(otherShopPrice) && otherShopPrice > 0 && sellingPrice > 0) {
                    var discountPercentage = ((otherShopPrice - sellingPrice) / otherShopPrice) * 100;

                    // Display the discount percentage
                    $('#DifferencePercentage').val(discountPercentage.toFixed(2) + "%");
                } else {
                    // If prices are not valid, clear the discount field
                    $('#discount').val('');
                }
            }
        });
          async function deleteImage(i) {
                var result = await _SWAL.CustomAlert();
                if(result){
                    // $('#oldImagesBytes['+i+']')

                    $('#image-container_' + i).remove();
                    updateInputIndices();
                }
            }

            function updateInputIndices() {
                debugger;
                 $('#editForm .image-container').each(function (index) {
                     debugger;
                // Find the input field inside the current image container
                var input = $(this).find('input[name^="oldImagesBytes"]'); // Find inputs with name starting with oldImagesBytes
                if (input.length > 0) {
                    // Update the name attribute with the new index
                    input.attr('name', 'oldImagesBytes[' + index + ']');
                    // Optionally, update the ID attribute as well
                    input.attr('id', 'oldImagesBytes_' + index);
                }
             });
            }
    </script>
}