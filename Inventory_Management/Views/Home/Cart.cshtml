@model Inventory_Management.Models.CartVM

@section Styles {
    <style>
        .time-slot-container {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
        }

        .time-slot {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            transition: opacity 0.3s;
            border-radius: 5px;
        }

            .time-slot:hover {
                background-color: #45a049;
            }

            .time-slot.faded {
                opacity: 0.5;
            }

        .product-name h6 {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 175px; /* Adjust to fit roughly 12 chars */
            display: inline-block;
            vertical-align: middle;
        }

        
    </style>
}

<section id="page-header" class="">
    <h2>#@Localizer["TrustOurProducts"]</h2>
    <p>@Localizer["Delivery"]</p>
</section>

@Html.AntiForgeryToken()
<section id="cart" class="section-p1">
    <div class="table-responsive">
    <table width="100%" id="cartTable">
        <thead>
            <tr>
                <td>@Localizer["Remove"]</td>
                @* <td>@Localizer["Image"]</td> *@
                <td>@Localizer["Product"]</td>
                <td>@Localizer["Price"]</td>
                <td>@Localizer["Quantity"]</td>
                <td>@Localizer["Subtotal"]</td>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    </div>
</section>

<section id="cart-add" class="section-p1">
    <form id="customerForm" class="col-12" asp-action="CheckoutDetails" asp-controller="Home">
        @*  <div id="coupon">
        <h3>Apply Coupon</h3>
        <div>
            <input type="text" placeholder="Enter Your Ccoupon">
            <button class="normal">Apply</button>
        </div>
    </div> *@
        <input class="form-control" asp-for="OrderNumber" hidden type="text">

        <div class="row">
            <div id="subtotal" class="col-md-6 col-12">
                <h3>@Localizer["CartTotals"]</h3>
                <table>
                    <tr>
                        <td>@Localizer["CartSubtotal"]</td>
                        <td>@Localizer["Currency"] <span id="cartSubTotal">0.0</span></td>
                    </tr>
                    <tr>
                        <td>@Localizer["ShippingArea"]</td>
                        <td>
                            <div class="dropdown-container">
                                <select class="form-select mb-2" aria-label="multiple select example"
                                        asp-for="AreaId" asp-items="@(new SelectList(Model.Areas, "Value", "Text"))" data-placeholder=" Choose Area...">
                                    <option disabled>@Localizer["Delivery"]</option>
                                </select>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td><strong>@Localizer["Total"]</strong></td>
                        <td><strong>@Localizer["Currency"] <span id="total">0.0</span></strong></td>
                    </tr>
                </table>
            </div>
            <div id="subtotal" class="col-md-6 col-12">
                <h3>@Localizer["DeliveryInformation"]</h3>
                <table>
                    <tr>
                        <td><strong>@Localizer["YourName"] <span class="text-danger">*</span></strong></td>
                        <td>
                            <input class="form-control" asp-for="CustomerName" type="text" placeholder="@Localizer["YourName"]">
                            <span asp-validation-for="CustomerName" class="text-danger"></span>
                        </td>
                    </tr>
                    <tr>
                        <td><strong>@Localizer["ContactNumber"] <span class="text-danger">*</span></strong></td>
                        <td>
                            <input class="form-control" asp-for="CustomerPhone" type="text" placeholder="@Localizer["ContactNumber"]">
                            <span asp-validation-for="CustomerPhone" class="text-danger"></span>

                        </td>
                    </tr>
                    <tr>
                        <td><strong>@Localizer["OptionalContactNumber"]</strong></td>
                        <td>
                            <input class="form-control" asp-for="OptionalCustomerPhone" type="text" placeholder="@Localizer["OptionalContactNumber"]">
                            <span asp-validation-for="OptionalCustomerPhone" class="text-danger"></span>

                        </td>
                    </tr>
                    <tr>
                        <td><strong>@Localizer["Address"] <span class="text-danger">*</span></strong></td>
                        <td>
                            <textarea cols="3" value="" class="form-control" asp-for="CustomerAddress" type="text" placeholder="@Localizer["Address"]"></textarea>
                            <span asp-validation-for="CustomerAddress" class="text-danger"></span>
                        </td>
                    </tr>
                    <tr>
                        <td><strong>@Localizer["pleaseProvideDetailedAddressForSmoothAndFastDelivery"]</strong></td>
                        <td>
                            <input class="form-control my-1" asp-for="StreetName" type="text" placeholder="@Localizer["StreetName"]">
                            <span asp-validation-for="StreetName" class="text-danger"></span>
                            <input class="form-control my-1" asp-for="BuildingNumber" type="text" placeholder="@Localizer["BuildingNumber"]">
                            <span asp-validation-for="BuildingNumber" class="text-danger"></span>
                            <input class="form-control my-1" asp-for="Floor" type="text" placeholder="@Localizer["Floor"]">
                            <span asp-validation-for="Floor" class="text-danger"></span>
                            <input class="form-control my-1" asp-for="ApartmentNumber" type="text" placeholder="@Localizer["ApartmentNumber"]">
                            <span asp-validation-for="ApartmentNumber" class="text-danger"></span>
                            <input class="form-control my-1" asp-for="LandMark" type="text" placeholder="@Localizer["LandMark"]">
                            <span asp-validation-for="LandMark" class="text-danger"></span>

                            <button class="my-2" type="button" id="getLocationBtn">📍 @Localizer["GetYourLocation"] </button>
                            <input class="form-control" type="text" name="locationInput" id="locationInput" placeholder="Your location" readonly />


                        </td>
                    </tr>
                </table>
                <strong>@Localizer["PreferableDeliverySlots"]</strong>
                <p>@Localizer["youCanChooseMultipleDeliverySlots"]</p>
                <div class="time-slot-container d-flex">
                    @foreach (var delivery in @Model.DeliverySlotVMs)
                    {
                        <button type="button" class="time-slot" onclick="selectSlot(this)">@delivery.StartTime - @delivery.EndTime @delivery.AM_PM</button>
                    }
                </div>
            </div>
        </div>
        <div class="col-12 text-center">
            <button class="btn" type="submit" id="checkout">@Localizer["ProceedToCheckout"]</button>

            <input id="successMessageOnsubmission" hidden type="text" data-val-custom="@Html.Encode(Localizer["YourOrderIsSubmittedSuccessfully"])">
            <input id="OurTeamWillContactYouSoon" hidden type="text" data-val-custom="@Html.Encode(Localizer["OurTeamWillContactYouSoon"])">
        </div>
    </form>
</section>

@section scripts {
    @* <partial name="_ValidationScriptsPartial"> *@
    <script>
        var selectedSlotsValue = [];
        var decodedOurTeamWillContactYouSoon = "";
        var decoded = "";
        $(document).ready(function() {

                translatedMessages();
                 var cart = JSON.parse(localStorage.getItem('cart')) || [];
                 if(cart == [] || $("#cartNum").length==0){
                     var cartt = $("#cartNum").length;
                       $("#cartNum,#cartNum1")[0].innerHTML= 0;
                     // $("#cartNum1")[0].innerHTML= 0;
                 }else{
                       $("#cartNum,#cartNum1")[0].innerHTML= cart.length;
                     // $("#cartNum1")[0].innerHTML= cart.length;

                cart.forEach(function(item) {
                    AddNewRow(item);
                });
                  };
                $("#AreaId").change(function() {
                    var selectedValue = $(this).val();
                    calcItems();

                 });
                 // $("#checkout").click(function(event){
                 //     event.preventDefault();
                 //    // submitCart();
                 // });
                  $('#customerForm').submit(function(event) {
                    event.preventDefault();
                    //validateEntries(event);
                    submitCart();
                  });

            calcItems();

         // Example usage:
         //  const storeLat = 29.993160;
         //  const storeLon = 31.307677;

         // Example customer location (replace with actual)
         //  const customerLat = 229.992430;
         //  const customerLon = 31.311539;

         // const distance = getDistanceFromLatLonInKm(storeLat, storeLon, customerLat, customerLon);
         // console.log("Distance in meters:", distance);

        });
          function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of the Earth in km
            const toRad = deg => deg * Math.PI / 180;

            const dLat = toRad(lat2 - lat1);
            const dLon = toRad(lon2 - lon1);

            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);

            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; // returns distance in km
        }


        function translatedMessages() {
            var encoded = $('#successMessageOnsubmission').data('val-custom');
            decoded = $('<textarea/>').html(encoded).text();
            var encodedOurTeamWillContactYouSoon = $('#OurTeamWillContactYouSoon').data('val-custom');
            decodedOurTeamWillContactYouSoon = $('<textarea/>').html(encodedOurTeamWillContactYouSoon).text();
        };
        function submitCart() {
            const token = $('input[name="__RequestVerificationToken"]').val();

            // Normalization helper
            function normalizeNumber(val) {
                if (!val) return 0;
                return parseFloat(val.toString().replace("٫", ".").replace(",", "."));
            }

            var cart = JSON.parse(localStorage.getItem('cart')) || [];
            var subTotal = 0;
            cart.forEach(function (item) {
                subTotal += normalizeNumber(item.quantity) * normalizeNumber(item.productPrice);
            });

            // Extract area price
            let selectedText = $("#AreaId option:selected").text();
            let match = selectedText.match(_RegexFloat);
            let val = match ? normalizeNumber(match[1]) : 0;

            var Area = val;
            var allTotal = subTotal + Area;

            // Collect form values
            var selectedSlots = selectedSlotsValue;
            var customerName = $("#CustomerName").val();
            var customerAddress = $("#CustomerAddress").val();
            var customerPhone = $("#CustomerPhone").val();
            var optionalCustomerPhone = $("#OptionalCustomerPhone").val();
            var StreetName = $("#StreetName").val();
            var BuildingNumber = $("#BuildingNumber").val();
            var Floor = $("#Floor").val();
            var ApartmentNumber = $("#ApartmentNumber").val();
            var LandMark = $("#LandMark").val();
            var locationInput = $("#locationInput").val();
            var OrderNumber = $("#OrderNumber").val();

            var $url = "@Url.Action("CheckoutDetails", "Home")";

            // Build payload
            var parameter = {
                OrderNumber: OrderNumber,
                TotalPrice: allTotal,
                PriceBeforeShipping: subTotal,
                ShippingAreaPrice: Area,
                CustomerName: customerName,
                CustomerAddress: customerAddress,
                CustomerPhone: customerPhone,
                OptionalCustomerPhone: optionalCustomerPhone,
                StreetName: StreetName,
                BuildingNumber: BuildingNumber,
                Floor: Floor,
                ApartmentNumber: ApartmentNumber,
                LandMark: LandMark,
                locationInput: locationInput,
                SelectedSlots: selectedSlots,
                ItemsVMs: cart.map(c => ({
                    productId: c.productId,
                    productName: c.productName,
                    productDisplayName: c.productDisplayName,
                    productPrice: normalizeNumber(c.productPrice),
                    quantity: normalizeNumber(c.quantity),
                    isKilogram: c.isKilogram
                }))
            };

            if (customerName !== "" && customerAddress !== "" && customerPhone !== "") {
                _Ajax.GETWithParameters($url, parameter, "POST", token, function () { },
                    function (data) {
                        if (data.isSuccess === true) {
                            _TOASTR.Success(decoded);
                            _TOASTR.Success(decodedOurTeamWillContactYouSoon);
                            localStorage.removeItem('cart');

                            setTimeout(function () {
                                window.location.href = '/';
                            }, 2000);
                        } else {
                            _TOASTR.Error(data.message);
                        }
                    },
                    function (xhr) {
                        _TOASTR.Error("Something went wrong..!!");
                    });
            }
        }

         function AddNewRow(data){
              var rowIndex = $('#cartTable tbody tr').length;
             var newRowHtml = `
                 <tr id="row-${rowIndex}">
                 <td><a onclick="Delete(event)" style="cursor:pointer"><i class="ri-close-circle-line text-danger"></i></a></td>
                 <td>
                     <div class="d-flex align-items-center justify-content-center">
                         <div class="font-weight-bold text-danger product-name"><h6>${data.productDisplayName}</h6></div>
                         <input class="font-weight-bold text-danger product-input" name="productInput[${rowIndex}]" id="productInput[${rowIndex}]" value="${data.productName}" hidden>
                     </div>
                 </td>
                 <td>
                     @Localizer["Currency"] ${data.productPrice}
                     <input type="text" class="form-control price-input" id="priceInput[${rowIndex}]" name="priceInput[${rowIndex}]" value="${data.productPrice}" hidden>
                 </td>
                 <td class="text-danger d-flex justify-content-center">
                 <input id="productInputId[${rowIndex}]" value="${data.productId}" data-id="${data.productId}" data-name="${data.productName}"
                 data-value="${data.productPrice}" hidden>
                 <button class="btn btn-white" type="button" id="button-plus-${rowIndex}" onclick="Add(event, ${rowIndex})"> + </button>
                 <input type="number" class="form-control stock-input p-1" id="stockInput[${rowIndex}]" name="stockInput[${rowIndex}]" value="${data.quantity}">
                 <input type="text" class="form-control isKilogram" value="${data.isKilogram}" hidden>
                 <button class="btn btn-white" type="button" id="button-minus-${rowIndex}" onclick="Decrement(event, ${rowIndex})"> − </button>
                 </td>
                 <td class="text-danger">
                <span class="itemPrice">@Localizer["Currency"] ${parseFloat(data.quantity * parseFloat(data.productPrice)).toFixed(2)}</span>
                 <input type="text" class="form-control stock-input" id="stockInput[${rowIndex}]" name="stockInput[${rowIndex}]" value="${data.quantity}" hidden>
                 </td>
             </tr>
         `;
             $('#cartTable tbody').append(newRowHtml);
            // reorderRows();
         };
         function handlePriceChange(rowIndex) {
            const value = document.getElementById(`priceInput[${rowIndex}]`).value;
            IsKilogramUpdateTotalPrice();
            console.log("Price changed:", value);
        }

         function calcItems(){
            var cart = JSON.parse(localStorage.getItem('cart')) || [];
            var subTotal = 0;
            cart.forEach(function(item){
                subTotal += item.quantity * parseFloat(item.productPrice);
            });
             let selectedText = $("#AreaId option:selected").text();
            // e.g. "2 - al hadaba al wosta (mokattam) (15)"

            // Use regex to get the number inside the last ()
            let match = selectedText.match(_RegexFloat);
            let val="";
            if (match) {
                val = match[1]; // "15"
                console.log(val);
            }
            var Area = val;
            $("#total")[0].innerHTML= subTotal + parseFloat(Area);
            $("#cartSubTotal")[0].innerHTML= subTotal;
         }
         function Add(event) {
                       var addBtn = $(event.target);
                       var inputField = addBtn.siblings('.stock-input');
                       var isKilogramInput = addBtn.siblings('.isKilogram');
                       var isKilogram = isKilogramInput.val();
                       var productId = addBtn[0].id;
                       var extractedIndex = productId.split('-').pop();
                       var convertingId= parseFloat(extractedIndex);

                       var inputElement = document.getElementById(`productInputId[${convertingId}]`);
                       var dataId = parseFloat(inputElement.dataset.id);
                       var dataName = inputElement.dataset.name;
                       var dataValue = inputElement.dataset.value;

                       var inputValue = parseFloat(inputField.val());
                       if(isKilogram=="kg"){
                            inputField.val(inputValue + .25);
                            AddToCart(dataId,dataName,dataValue,inputValue + .25,isKilogram);
                            $(".itemPrice")[convertingId].innerHTML = "$"+ ((inputValue + .25) * parseFloat(dataValue)) ;

                       }else{

                            inputField.val(inputValue + 1);
                            $(".itemPrice")[convertingId].innerHTML = "$"+ ((inputValue + 1) * parseFloat(dataValue)) ;
                            AddToCart(dataId,dataName,dataValue,inputValue + 1,isKilogram);
                       }

                       calcItems();
             };

         async function Delete(event) {
             var deleteBtn = $(event.target);
             var rowToDelete = deleteBtn.closest('tr');
             var productId = rowToDelete[0].id;
             var extractedIndex = productId.split('-').pop();
             var convertingId = parseFloat(extractedIndex);
             var inputElement = document.getElementById(`productInputId[${convertingId}]`);
             var dataId = inputElement.dataset.id;
             var result = await _SWAL.CustomAlertWithOwnMessage("Are you sure you want to Delete this item ???","Yes","No");
             if(result){
                 rowToDelete.remove();
                 RemoveFromCart(dataId);
                 calcItems();
                 location.reload();
             }
          };

         function RemoveFromCart(productId) {
                      let cart = JSON.parse(localStorage.getItem('cart')) || [];
                        cart = cart.filter(item => String(item.productId) !== String(productId));
                        localStorage.setItem('cart', JSON.stringify(cart));
                  }
         function AddToCart(productId, productName, productPrice, Quantity,unit) {
                 let cart = JSON.parse(localStorage.getItem('cart')) || [];
                 const existingProductIndex = cart.findIndex(item => item.productId === productId);

                 if (existingProductIndex > -1) {
                     cart[existingProductIndex].quantity = Quantity;
                 } else {
                     const newItem = {
                         productId: productId,
                         productName: productName,
                         productPrice: productPrice,
                         quantity: Quantity,
                         isKilogram: unit
                     };
                     cart.push(newItem);
                 }
                 localStorage.setItem('cart', JSON.stringify(cart));
             }

         function Decrement(event) {
                       var addBtn = $(event.target);
                       var inputField = addBtn.siblings('.stock-input');
                       var productId = addBtn[0].id;
                       var extractedIndex = productId.split('-').pop();
                       var convertingId= parseFloat(extractedIndex);
                       var inputElement = document.getElementById(`productInputId[${convertingId}]`);
                       var dataId = parseFloat(inputElement.dataset.id);
                       var dataName = inputElement.dataset.name;
                       var dataValue = inputElement.dataset.value;
                       var inputValue = parseFloat(inputField.val());
                       var isKilogramInput = addBtn.siblings('.isKilogram');
                       var isKilogram = isKilogramInput.val();

                       // inputField.val(inputValue - 1);
                       // $(".itemPrice")[convertingId].innerHTML = "$"+((inputValue - 1) * parseFloat(dataValue)) ;

                        if(isKilogram=="kg"){
                            inputField.val(inputValue - .25);
                            AddToCart(dataId,dataName,dataValue,inputValue - .25,isKilogram);
                            $(".itemPrice")[convertingId].innerHTML = "$"+ ((inputValue - .25) * parseFloat(dataValue)) ;
                            if  (inputValue - .25 <= 0) {
                           Delete(event);
                           return;
                       }

                       }else{

                            inputField.val(inputValue - 1);
                            $(".itemPrice")[convertingId].innerHTML = "$"+ ((inputValue - 1) * parseFloat(dataValue)) ;
                            AddToCart(dataId,dataName,dataValue,inputValue - 1,isKilogram);
                            if  (inputValue - 1 <= 0) {
                           Delete(event);
                           return;
                       }
                       }

                       
                       // AddToCart(dataId, dataName, dataValue, inputValue - 1);
                       calcItems();
          };
         function selectSlot(button) {
                    // Check if the button is already faded (selected)
                    button.classList.toggle('faded');
                    var selectedSlots = document.querySelectorAll('.time-slot.faded');

                    // Collect their text values (or innerText)
                    selectedSlotsValue = [];
                    selectedSlots.forEach(function(slot) {
                        selectedSlotsValue.push(slot.innerText);
                    });
                    console.log(selectedSlotsValue);
              }
      function normalizeNumber(val) {
            if (!val) return 0;
            return parseFloat(val.toString().replace("٫", ".").replace(",", "."));
        }

            // $('.price-input').each(function() {
            //      debugger;
            //      var price = parseFloat($(this).val());
            //      var row = $(this).closest('tr');
            //      var quantity = row.find('.quantity-input').val();
            //      var discount = row.find('.individualDiscount-input').val();
            //      var discountSwitch = $('#discountSwitch');
            // });
    </script>
    <script>
        $("#getLocationBtn").on("click", function () {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    function (position) {
                        var lat = position.coords.latitude;
                        var lon = position.coords.longitude;

                        var locationString = lat.toFixed(6) + ", " + lon.toFixed(6);
                        $("#locationInput").val(locationString);
                    },
                    function (error) {
                        alert("Error getting location: " + error.message);
                    }
                );
            } else {
                alert("Geolocation is not supported by your browser.");
            }
        });
    </script>

}
