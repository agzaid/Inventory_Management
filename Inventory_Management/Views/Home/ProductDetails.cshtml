@model Domain.Models.ProductVM

@section Styles {
    <style>
        .icon-hover:hover {
            border-color: #3b71ca !important;
            background-color: white !important;
            color: #3b71ca !important;
        }

        .small-Img {
            width: 60px; /* size of small images */
            height: 60px;
            object-fit: cover;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .icon-hover:hover i {
            color: #3b71ca !important;
        }
    </style>
}
<!-- content -->
<section class="py-5">
    <div class="container">
        <div class="row gx-5">
            <aside class="col-lg-6">
                <div class="border rounded-4 mb-3 d-flex justify-content-center">
                    <a data-fslightbox="mygalley" class="rounded-4" data-type="image">
                        <img style="max-width: auto; height: 80vh; margin: auto; width:100%;" id="featured-image" class="rounded-4 fit" src="@(Model.ListOfRetrievedImages?.Count > 0 ? Model.ListOfRetrievedImages[0] : "/images/placeholder.jpg")" />
                    </a>
                </div>
                <div class="d-flex justify-content-center mb-3">
                    @for (int i = 0; i < Model.ListOfRetrievedImages?.Count; i++)
                    {
                        <a href="@Model.ListOfRetrievedImages[i]"
                           data-fslightbox="mygalley"
                           class="border mx-1 rounded-2"
                           data-type="image">
                            <img src="@Model.ListOfRetrievedImages[i]"
                                 class="small-Img"
                                 alt="Additional Image @i"
                                 data-index="@i" />
                        </a>
                    }

                </div>
                <!-- thumbs-wrap.// -->
                <!-- gallery-wrap .end// -->
            </aside>
            <main class="col-lg-6">
                <div class="ps-lg-3">
                    <h4 class="title text-primary">
                        @Model.ProductName
                    </h4>
                    <div class="mb-3">
                        <h4>
                            $@Model.SellingPrice @if (Model.IsKilogram)
                            {
                                <span>/ Kg</span>
                            }
                            <br /><br /><del class="text-danger">$@Model.OtherShopsPrice</del>
                        </h4>
                    </div>

                    <p>
                        @Model.Description
                    </p>

                    <h6>@Model.DifferencePercentage % discount</h6>
                    <hr />

                    <div class="row mb-4">
                        @*  <div class="col-md-4 col-6">
                            <label class="mb-2">Size</label>
                            <select class="form-select border border-secondary" style="height: 35px;">
                                <option>Small</option>
                                <option>Medium</option>
                                <option>Large</option>
                            </select>
                        </div> *@
                        <!-- col.// -->
                        <div class="col-md-4 col-6 mb-3 product-quantity" data-product-id="@Model.Id" data-product-name="@Model.ProductName" data-product-price="@Model.SellingPrice">
                            <label class="mb-2 d-block">Quantity</label>
                            @if (!Model.IsKilogram)
                            {
                                
                            <div class="input-group mb-3" style="width: 170px;">
                                <button class="btn btn-white border border-secondary px-3 button-minus" type="button">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="text" class="form-control text-center border border-secondary quantity-input" value="1" />
                                <button class="btn btn-white border border-secondary px-3 button-plus" type="button">
                                    <i class="fa fa-plus" aria-hidden="true"></i>
                                </button>
                                </div>
                            }
                            else
                            {
                                <div class="input-group mb-3 product-quantity" data-product-id="@Model.Id" data-product-name="@Model.ProductName" data-product-price="@Model.SellingPrice" data-unit="kg" style="width: 170px;">
                                    <button class="btn btn-white border border-secondary px-3 button-minus" type="button">
                                        <i class="fas fa-minus"></i>
                                    </button>
                                    <input type="text" class="form-control text-center border border-secondary quantity-input" data-unit="kg" value="1" />
                                    <button class="btn btn-white border border-secondary px-3 button-plus" type="button">
                                        <i class="fa fa-plus" aria-hidden="true"></i>
                                    </button>
                                </div>

                            }
                        </div>

                    </div>
                    @* <a class="btn btn-warning shadow-0"> Buy now </a> *@
                    <button class="btn btn-danger remove-from-cart" data-product-id="@Model.Id">
                        <i class="fa fa-trash"></i> Remove from cart
                    </button>
                    <a class="btn btn-primary shadow-0" onclick="addToCart()"> <i class="me-1 fa fa-shopping-basket"></i> Add to cart </a>
                    @* <a class="btn btn-light border border-secondary py-2 icon-hover px-3"> <i class="me-1 fa fa-heart fa-lg"></i> Save </a> *@

                    <input id="successMessageOnsubmission" hidden type="text" data-val-custom="@Html.Encode(Localizer["YourOrderIsSubmittedSuccessfully"])">
                    <input id="ItemWasDeletedSuccessfully" hidden type="text" data-val-custom="@Html.Encode(Localizer["ItemWasDeletedSuccessfully"])">
                </div>
            </main>
        </div>
    </div>
</section>
<!-- content -->
<!-- Footer -->
@section Scripts {
    <script>
        var decodedItemWasDeletedSuccessfully = "";
        var decoded = "";
        $(document).ready(function () {
               
               translatedMessages();

                    basketNumber();


          $('.small-Img').on('click', function () {
            $('#featured-image').attr('src', $(this).attr('src'));
        });
        function getStepSize(unit) {
            return unit === 'kg' ? 0.25 : 1;
        }
  // Just update input field values — no localStorage
        $('.button-plus').on('click', function () {
            const parent = $(this).closest('.product-quantity');
            const input = parent.find('.quantity-input');
            const unit = parent.data('unit'); // "kg" or "piece"
            const step = getStepSize(unit);

            let currentVal = parseFloat(input.val()) || 0;
            let newVal = (currentVal + step).toFixed(2); // Keep decimals for kg
            input.val(newVal);

            const productId = parent.data('product-id');
            if (isInCart(productId)) {
                const productName = parent.data('product-name');
                const productPrice = parent.data('product-price');
                updateCartStorage(productId, productName, productPrice, parseFloat(newVal));
            }
        });

        $('.button-minus').on('click', function () {
            const parent = $(this).closest('.product-quantity');
            const input = parent.find('.quantity-input');
            const unit = parent.data('unit');
            const step = getStepSize(unit);

            let currentVal = parseFloat(input.val()) || 0;
            let newVal = Math.max(currentVal - step, step).toFixed(2);
            input.val(newVal);

            const productId = parent.data('product-id');
            if (isInCart(productId)) {
                const productName = parent.data('product-name');
                const productPrice = parent.data('product-price');
                updateCartStorage(productId, productName, productPrice, parseFloat(newVal));
            }
        });


                $('.remove-from-cart').on('click', function () {
                      const productId = $(this).data('product-id');
                      RemoveFromCart(productId);
                      $('#cartNum').text(JSON.parse(localStorage.getItem('cart')).length);
                      });
                 });

           function isInCart(productId) {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            return cart.some(item => item.productId === productId);
             }

            function cartQuantity(productId) {
                   const cart = JSON.parse(localStorage.getItem('cart')) || [];
                   const item = cart.find(item => item.productId === productId);
                   return item ? item.quantity : 0;
                 }

             function updateCartStorage(productId, productName, productPrice, quantity) {
                 debugger;
                 let cart = JSON.parse(localStorage.getItem('cart')) || [];
                 const index = cart.findIndex(item => item.productId === productId);

                 if (quantity <= 0) {
                     cart = cart.filter(item => item.productId !== productId);
                 } else if (index > -1) {
                     cart[index].quantity = quantity;
                 } else {
                     cart.push({
                         productId,
                         productName,
                         productPrice,
                         quantity
                     });
                 }

                 localStorage.setItem('cart', JSON.stringify(cart));
                 $('#cartNum').text(cart.length);

                       basketNumber();
             }

               function addToCart() {
                   debugger;
                     const parent = $('.product-quantity'); // You can adjust this selector if multiple products
                     const productId = parent.data('product-id');
                     const productName = parent.data('product-name');
                     const productPrice = parent.data('product-price');
                     const quantity = parseFloat(parent.find('.quantity-input').val()) || 1;
                           const unit = $(".quantity-input").data('unit');

                     let cart = JSON.parse(localStorage.getItem('cart')) || [];
                     const existingProductIndex = cart.findIndex(item => item.productId === productId);

                     if (existingProductIndex > -1) {
                         cart[existingProductIndex].quantity = quantity;
                     } else {
                         cart.push({
                             productId,
                             productName,
                             productPrice,
                             quantity,
                             isKilogram: unit,
                         });
                     }

                     localStorage.setItem('cart', JSON.stringify(cart));
                     $('#cartNum').text(cart.length);
                     _TOASTR.Success(decoded);

                           basketNumber();
                 }

              function basketNumber(){
                      const productId = $('[data-product-id]').data('product-id');
                 if(isInCart(productId)){
                    var num = cartQuantity(productId);
                    $('.quantity-input').val(num);
                 }
           }

               function translatedMessages() {
                 var encoded = $('#successMessageOnsubmission').data('val-custom');
                 decoded = $('<textarea/>').html(encoded).text();
                 var encodedItemWasDeletedSuccessfully = $('#ItemWasDeletedSuccessfully').data('val-custom');
                 decodedItemWasDeletedSuccessfully = $('<textarea/>').html(encodedItemWasDeletedSuccessfully).text();
             };
               function RemoveFromCart(productId) {
                  let cart = JSON.parse(localStorage.getItem('cart')) || [];
                  cart = cart.filter(item => item.productId !== productId);
                  localStorage.setItem('cart', JSON.stringify(cart));

                   _TOASTR.Error(decodedItemWasDeletedSuccessfully);
             }
    </script>
}