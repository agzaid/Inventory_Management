@model Domain.Models.ProductVM

@section Styles {
    <style>
        .icon-hover:hover {
            border-color: #3b71ca !important;
            background-color: white !important;
            color: #3b71ca !important;
        }

        .small-Img {
            width: 60px; /* size of small images */
            height: 60px;
            object-fit: cover;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .icon-hover:hover i {
            color: #3b71ca !important;
        }
    </style>
}
<!-- content -->
<section class="py-5">
    <div class="container">
        <div class="row gx-5">
            <aside class="col-lg-6">
                <div class="border rounded-4 mb-3 d-flex justify-content-center">
                    <a data-fslightbox="mygalley" class="rounded-4" data-type="image">
                        <img style="max-width: auto; height: 80vh; margin: auto;" id="featured-image" class="rounded-4 fit" src="@(Model.ListOfRetrievedImages?.Count > 0 ? Model.ListOfRetrievedImages[0] : "/images/placeholder.jpg")" />
                    </a>
                </div>
                <div class="d-flex justify-content-center mb-3">
                    @for (int i = 0; i < Model.ListOfRetrievedImages?.Count; i++)
                    {
                        <a data-fslightbox="mygalley" class="border mx-1 rounded-2" data-type="image">
                            <img src="@Model.ListOfRetrievedImages[i]"
                                 class="small-Img"
                                 alt="Additional Image @i"
                                 data-index="@i" />
                        </a>
                    }
                </div>
                <!-- thumbs-wrap.// -->
                <!-- gallery-wrap .end// -->
            </aside>
            <main class="col-lg-6">
                <div class="ps-lg-3">
                    <h4 class="title text-dark">
                        @Model.ProductName
                    </h4>
                    <div class="mb-3">
                        <h4>$@Model.SellingPrice<br /><br /><del class="text-danger">$@Model.OtherShopsPrice</del></h4>
                    </div>

                    <p>
                        @Model.Description
                    </p>

                    <h6>@Model.DifferencePercentage % discount</h6>
                    <hr />

                    <div class="row mb-4">
                        @*  <div class="col-md-4 col-6">
                            <label class="mb-2">Size</label>
                            <select class="form-select border border-secondary" style="height: 35px;">
                                <option>Small</option>
                                <option>Medium</option>
                                <option>Large</option>
                            </select>
                        </div> *@
                        <!-- col.// -->
                        <div class="col-md-4 col-6 mb-3 product-quantity" data-product-id="@Model.Id" data-product-name="@Model.ProductName" data-product-price="@Model.SellingPrice">
                            <label class="mb-2 d-block">Quantity</label>
                            <div class="input-group mb-3" style="width: 170px;">
                                <button class="btn btn-white border border-secondary px-3 button-minus" type="button">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <input type="text" class="form-control text-center border border-secondary quantity-input" value="1" />
                                <button class="btn btn-white border border-secondary px-3 button-plus" type="button">
                                    <i class="fa fa-plus" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>

                    </div>
                    @* <a class="btn btn-warning shadow-0"> Buy now </a> *@
                    <button class="btn btn-danger remove-from-cart" data-product-id="@Model.Id">
                        <i class="fa fa-trash"></i> Remove from cart
                    </button>
                    <a class="btn btn-primary shadow-0" onclick="addToCart()"> <i class="me-1 fa fa-shopping-basket"></i> Add to cart </a>
                    @* <a class="btn btn-light border border-secondary py-2 icon-hover px-3"> <i class="me-1 fa fa-heart fa-lg"></i> Save </a> *@
                </div>
            </main>
        </div>
    </div>
</section>
<!-- content -->
<!-- Footer -->
@section Scripts {
    <script>
        $(document).ready(function () {
               const productId = $('[data-product-id]').data('product-id');
               if(isInCart(productId)){
                  var num = cartQuantity(productId);
                  $('.quantity-input').val(num);
               }
                 // Just update input field values — no localStorage
               $('.button-plus').on('click', function () {
                    const parent = $(this).closest('.product-quantity');
                     const input = parent.find('.quantity-input');
                     const currentVal = parseInt(input.val()) || 0;
                     const newVal = currentVal + 1;
                     input.val(newVal);

                     // Update cart only if product exists
                     const productId = parent.data('product-id');
                     if (isInCart(productId)) {
                         const productName = parent.data('product-name');
                         const productPrice = parent.data('product-price');
                         updateCartStorage(productId, productName, productPrice, newVal);
                     }
               });

               $('.button-minus').on('click', function () {
                  const parent = $(this).closest('.product-quantity');
                    const input = parent.find('.quantity-input');
                    const currentVal = parseInt(input.val()) || 0;
                    const newVal = Math.max(currentVal - 1, 1); // prevent going below 1
                    input.val(newVal);

                    // Update cart only if product exists
                    const productId = parent.data('product-id');
                    if (isInCart(productId)) {
                        const productName = parent.data('product-name');
                        const productPrice = parent.data('product-price');
                        updateCartStorage(productId, productName, productPrice, newVal);
                    }
               });
                $('.remove-from-cart').on('click', function () {
                      const productId = $(this).data('product-id');
                      RemoveFromCart(productId);
                      $('#cartNum').text(JSON.parse(localStorage.getItem('cart')).length);
                      });
                 });

           function isInCart(productId) {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            return cart.some(item => item.productId === productId);
             }

            function cartQuantity(productId) {
                   const cart = JSON.parse(localStorage.getItem('cart')) || [];
                   const item = cart.find(item => item.productId === productId);
                   return item ? item.quantity : 0;
                 }

             function updateCartStorage(productId, productName, productPrice, quantity) {
                 let cart = JSON.parse(localStorage.getItem('cart')) || [];
                 const index = cart.findIndex(item => item.productId === productId);

                 if (quantity <= 0) {
                     cart = cart.filter(item => item.productId !== productId);
                 } else if (index > -1) {
                     cart[index].quantity = quantity;
                 } else {
                     cart.push({
                         productId,
                         productName,
                         productPrice,
                         quantity
                     });
                 }

                 localStorage.setItem('cart', JSON.stringify(cart));
                 $('#cartNum').text(cart.length);
             }

               function addToCart() {
                     const parent = $('.product-quantity'); // You can adjust this selector if multiple products
                     const productId = parent.data('product-id');
                     const productName = parent.data('product-name');
                     const productPrice = parent.data('product-price');
                     const quantity = parseInt(parent.find('.quantity-input').val()) || 1;

                     let cart = JSON.parse(localStorage.getItem('cart')) || [];
                     const existingProductIndex = cart.findIndex(item => item.productId === productId);

                     if (existingProductIndex > -1) {
                         cart[existingProductIndex].quantity = quantity;
                     } else {
                         cart.push({
                             productId,
                             productName,
                             productPrice,
                             quantity
                         });
                     }

                     localStorage.setItem('cart', JSON.stringify(cart));
                     $('#cartNum').text(cart.length);
                 }
               function RemoveFromCart(productId) {
                  let cart = JSON.parse(localStorage.getItem('cart')) || [];
                  cart = cart.filter(item => item.productId !== productId);
                  localStorage.setItem('cart', JSON.stringify(cart));
             }
    </script>
}