@model Domain.Models.ProductVM

@section Styles {
    <style>
        /* General */
        .product-card {
            background: #fff;
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 8px 24px rgba(0,0,0,0.08);
            transition: transform 0.2s ease;
        }

            .product-card:hover {
                transform: translateY(-5px);
            }

        /* Main image */
        .featured-img {
            max-width: 100%;
            height: 50vh;
            border-radius: 16px;
            object-fit: cover;
            box-shadow: 0 6px 18px rgba(0,0,0,0.12);
            transition: transform 0.3s ease;
        }

            .featured-img:hover {
                transform: scale(1.02);
            }

        /* Thumbnails */
        .small-Img {
            width: 70px;
            height: 70px;
            object-fit: cover;
            cursor: pointer;
            border-radius: 12px;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

            .small-Img:hover {
                transform: scale(1.1);
                border-color: #3b71ca;
            }

        /* Price */
        .product-price {
            font-size: 1.8rem;
            font-weight: 600;
            color: #111;
        }

            .product-price del {
                font-size: 1rem;
                margin-left: 10px;
                color: #e74c3c;
            }

        /* Quantity selector */
        .quantity-wrapper {
            display: flex;
            align-items: center;
            border: 1px solid #ddd;
            border-radius: 12px;
            overflow: hidden;
            max-width: 180px;
        }

            .quantity-wrapper input {
                border: none;
                text-align: center;
                width: 88px;
                font-weight: 500;
            }

            .quantity-wrapper button {
                background: #f9f9f9;
                border: none;
                padding: 10px 16px;
                cursor: pointer;
                font-size: 18px;
                transition: background 0.2s ease;
            }

                .quantity-wrapper button:hover {
                    background: #ececec;
                }

        /* Buttons */
        .btn-modern {
            padding: 12px 20px;
            border-radius: 12px;
            font-weight: 600;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .btn-modern:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 14px rgba(0,0,0,0.1);
            }

        .btn-primary-modern {
            background: linear-gradient(135deg, #3b71ca, #4f8ef7);
            border: none;
            color: #fff;
        }

        .btn-danger-modern {
            background: linear-gradient(135deg, #e74c3c, #ff7675);
            border: none;
            color: #fff;
        }
    </style>
}
<section class="py-5">
    <div class="container">
        <div class="row gx-5 product-card">
            <aside class="col-lg-6">
                <!-- Main image -->
                <div class="mb-3 d-flex justify-content-center">
                    <img id="featured-image"
                         class="featured-img"
                         src="@(Model.ListOfRetrievedImages?.Count > 0 ? Model.ListOfRetrievedImages[0] : "/images/placeholder.jpg")"
                         alt="@Model.ProductName" />
                </div>

                <!-- Thumbnails -->
                <div class="d-flex justify-content-center gap-2">
                    @for (int i = 0; i < Model.ListOfRetrievedImages?.Count; i++)
                    {
                        <img src="@Model.ListOfRetrievedImages[i]"
                             class="small-Img"
                             alt="Image @i"
                             data-index="@i" />
                    }
                </div>
            </aside>

            <main class="col-lg-6">
                <div>
                    <h2 class="text-primary fw-bold">@Model.ProductName</h2>

                    <div class="mb-3">
                        <span class="product-price">
                            $@(Model.IsKilogram
                                                        ? string.Format("{0:0.00}", (Model.SellingPrice ?? 0) * 0.25m)
                                                        : string.Format("{0:0.00}", Model.SellingPrice ?? 0))
                        </span>
                        @if (Model.IsKilogram)
                        {
                            <small class="text-muted">($@string.Format("{0:0.00}", Model.SellingPrice ?? 0) / Kg)</small>
                        }
                        <del>$@Model.OtherShopsPrice</del>
                    </div>


                    <p class="text-muted">@Model.Description</p>
                    <h6 class="text-success">@Model.DifferencePercentage% discount</h6>
                    <hr />

                    <!-- Quantity -->
                    <!-- Quantity -->
                    <div class="mb-4 product-quantity"
                         data-product-id="@Model.Id"
                         data-product-name="@Model.ProductName"
                         data-product-price="@Model.SellingPrice"
                         data-unit="@(Model.IsKilogram ? "kg" : "piece")">

                        <label class="mb-2 fw-semibold">Quantity</label>
                        <div class="quantity-wrapper">
                            <button type="button" class="button-minus">−</button>
                            <input type="text"
                                   class="quantity-input"
                                   value="@(Model.IsKilogram ? "0.25" : "1")"
                                   data-unit="@(Model.IsKilogram ? "kg" : "piece")" />
                            <button type="button" class="button-plus">+</button>
                        </div>

                       
                    </div>


                    <!-- Buttons -->
                    <button class="btn btn-danger-modern btn-modern remove-from-cart"
                            data-product-id="@Model.Id">
                        <i class="fa fa-trash"></i> Remove
                    </button>
                    <a class="btn btn-primary-modern btn-modern"
                       onclick="addToCart()">
                        <i class="fa fa-shopping-basket me-1"></i> Add to cart
                    </a>
                      <input id="successMessageOnsubmission" hidden type="text" data-val-custom="@Html.Encode(Localizer["YourOrderIsSubmittedSuccessfully"])">
                    <input id="ItemWasDeletedSuccessfully" hidden type="text" data-val-custom="@Html.Encode(Localizer["ItemWasDeletedSuccessfully"])">

                </div>
            </main>
        </div>
    </div>
</section>

<!-- content -->
<!-- Footer -->
@section Scripts {
    <script>
        var decodedItemWasDeletedSuccessfully = "";
        var decoded = "";
        $(document).ready(function () {
               
               translatedMessages();

                    basketNumber();


          $('.small-Img').on('click', function () {
            $('#featured-image').attr('src', $(this).attr('src'));
        });
                function getStepSize(unit) {
            return unit === 'kg' ? 0.25 : 1;
        }

        function updateCalculatedPrice(parent) {
            const input = parent.find('.quantity-input');
            const price = parseFloat(parent.data('product-price')) || 0;
            const quantity = parseFloat(input.val()) || 0;
            const total = (price * quantity).toFixed(2);

            parent.find('#calculated-price').text(`$${total}`);
        }

        // Plus button
        $('.button-plus').on('click', function () {
            const parent = $(this).closest('.product-quantity');
            const input = parent.find('.quantity-input');
            const unit = parent.data('unit');
            const step = getStepSize(unit);

            let currentVal = parseFloat(input.val()) || 0;
            let newVal = (currentVal + step).toFixed(2);
            input.val(newVal);

            updateCalculatedPrice(parent);

            const productId = parent.data('product-id');
            if (isInCart(productId)) {
                const productName = parent.data('product-name');
                const productPrice = parent.data('product-price');
                updateCartStorage(productId, productName, productPrice, parseFloat(newVal));
            }
        });

        // Minus button
        $('.button-minus').on('click', function () {
            const parent = $(this).closest('.product-quantity');
            const input = parent.find('.quantity-input');
            const unit = parent.data('unit');
            const step = getStepSize(unit);

            let currentVal = parseFloat(input.val()) || 0;
            let newVal = Math.max(currentVal - step, step).toFixed(2);
            input.val(newVal);

            updateCalculatedPrice(parent);

            const productId = parent.data('product-id');
            if (isInCart(productId)) {
                const productName = parent.data('product-name');
                const productPrice = parent.data('product-price');
                updateCartStorage(productId, productName, productPrice, parseFloat(newVal));
            }
        });


                $('.remove-from-cart').on('click', function () {
                      const productId = $(this).data('product-id');
                      RemoveFromCart(productId);
                      $('#cartNum1').text(JSON.parse(localStorage.getItem('cart')).length);
                      });
                 });

           function isInCart(productId) {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            return cart.some(item => item.productId === productId);
             }

            function cartQuantity(productId) {
                   const cart = JSON.parse(localStorage.getItem('cart')) || [];
                   const item = cart.find(item => item.productId === productId);
                   return item ? item.quantity : 0;
                 }

             function updateCartStorage(productId, productName, productPrice, quantity) {
                 let cart = JSON.parse(localStorage.getItem('cart')) || [];
                 const index = cart.findIndex(item => item.productId === productId);

                 if (quantity <= 0) {
                     cart = cart.filter(item => item.productId !== productId);
                 } else if (index > -1) {
                     cart[index].quantity = quantity;
                 } else {
                     cart.push({
                         productId,
                         productName,
                         productPrice,
                         quantity
                     });
                 }

                 localStorage.setItem('cart', JSON.stringify(cart));
                 $('#cartNum1').text(cart.length);

                       basketNumber();
             }

               function addToCart() {
                     const parent = $('.product-quantity'); // You can adjust this selector if multiple products
                     const productId = parent.data('product-id');
                     const productName = parent.data('product-name');
                     const productPrice = parent.data('product-price');
                     const quantity = parseFloat(parent.find('.quantity-input').val()) || 1;
                           const unit = $(".quantity-input").data('unit');

                     let cart = JSON.parse(localStorage.getItem('cart')) || [];
                     const existingProductIndex = cart.findIndex(item => item.productId === productId);

                     if (existingProductIndex > -1) {
                         cart[existingProductIndex].quantity = quantity;
                     } else {
                         cart.push({
                             productId,
                             productName,
                             productPrice,
                             quantity,
                             isKilogram: unit,
                         });
                     }

                     localStorage.setItem('cart', JSON.stringify(cart));

                     $('#cartNum').text(cart.length);
                     _TOASTR.Success(decoded);

                           basketNumber();
                 }

              function basketNumber(){
                      const productId = $('[data-product-id]').data('product-id');
                 if(isInCart(productId)){
                    var num = cartQuantity(productId);
                    $('.quantity-input').val(num);
                 }
           }

               function translatedMessages() {
                 var encoded = $('#successMessageOnsubmission').data('val-custom');
                 decoded = $('<textarea/>').html(encoded).text();
                 var encodedItemWasDeletedSuccessfully = $('#ItemWasDeletedSuccessfully').data('val-custom');
                 decodedItemWasDeletedSuccessfully = $('<textarea/>').html(encodedItemWasDeletedSuccessfully).text();
             };
               function RemoveFromCart(productId) {
                  let cart = JSON.parse(localStorage.getItem('cart')) || [];
                  cart = cart.filter(item => item.productId !== productId);
                  localStorage.setItem('cart', JSON.stringify(cart));
                        $('#cartNum').text(cart.length);

                   _TOASTR.Error(decodedItemWasDeletedSuccessfully);
             }
    </script>
}